#!/usr/bin/env python3
"""Daemon de auto-evolu√ß√£o cont√≠nua para o SeedAI."""

from __future__ import annotations

import json
import time
import traceback
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List, Optional, Any
import yaml
import asyncio

from .autonomous_planner import AutonomousPlanner, run_autonomous_planning
from .autoeval import RunEvaluation, EvaluationSeed
from .seeds import SeedBacklog


class ContinuousEvolutionDaemon:
    """Daemon que mant√©m a auto-evolu√ß√£o cont√≠nua do SeedAI."""
    
    def __init__(self, workspace_root: Path, config_path: Path = None) -> None:
        self.workspace_root = workspace_root
        self.config_path = config_path or Path("configs/seed_manual.yaml")
        self.metrics_path = workspace_root / "seed" / "metrics" / "history.json"
        self.evaluations_path = workspace_root / "seed" / "evaluations" / "run_evaluations.jsonl"
        self.backlog_path = workspace_root / "seed" / "backlog.yaml"
        self.plans_path = workspace_root / "seed" / "plans"
        self.logs_path = workspace_root / "seed" / "daemon_logs"
        self.logs_path.mkdir(parents=True, exist_ok=True)
        
        # Componentes principais
        self.planner = AutonomousPlanner(workspace_root)
        
        # Estado do daemon
        self.running = False
        self.cycle_count = 0
        self.total_seeds_executed = 0
        self.successful_seeds = 0
        self.failed_seeds = 0
        self.last_analysis_timestamp = None
        
        print(f"ü§ñ DAEMON DE AUTO-EVOLU√á√ÉO CONT√çNUA INICIALIZADO")
        print(f"   Workspace: {workspace_root}")
        print(f"   Config: {self.config_path}")
        print(f"   Backlog: {self.backlog_path}")
    
    def start(self, max_cycles: Optional[int] = None, analysis_interval: int = 300) -> None:
        """Inicia o daemon de auto-evolu√ß√£o cont√≠nua."""
        print(f"\nüöÄ INICIANDO DAEMON DE AUTO-EVOLU√á√ÉO CONT√çNUA")
        print(f"   Ciclos m√°ximos: {max_cycles or 'infinito'}")
        print(f"   Intervalo de an√°lise: {analysis_interval} segundos")
        print(f"   Pressione Ctrl+C para parar")
        print("=" * 60)
        
        self.running = True
        self.cycle_count = 0
        
        try:
            while self.running:
                self.cycle_count += 1
                print(f"\nüîÑ CICLO #{self.cycle_count} - {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}")
                print("-" * 50)
                
                # 1. Executar seeds dispon√≠veis
                seeds_executed = self._execute_available_seeds()
                
                # 2. Analisar resultados e m√©tricas
                analysis_results = self._analyze_system_performance()
                
                # 3. Gerar novos seeds com LLM baseado na an√°lise
                new_seeds_generated = self._generate_new_seeds_autonomously(analysis_results)
                
                # 4. Registrar ciclo no log
                self._log_cycle_completion(seeds_executed, analysis_results, new_seeds_generated)
                
                # 5. Verificar limite de ciclos
                if max_cycles and self.cycle_count >= max_cycles:
                    print(f"\nüèÅ Limite de {max_cycles} ciclos atingido. Parando daemon...")
                    break
                
                # 6. Esperar antes do pr√≥ximo ciclo
                print(f"\n‚è∞ Pr√≥ximo ciclo em {analysis_interval} segundos...")
                time.sleep(analysis_interval)
                
        except KeyboardInterrupt:
            print(f"\nüõë Daemon interrompido pelo usu√°rio")
        except Exception as e:
            print(f"\n‚ùå Erro fatal no daemon: {e}")
            traceback.print_exc()
        finally:
            self.running = False
            self._generate_final_report()
            print(f"\n‚úÖ DAEMON FINALIZADO - {self.cycle_count} ciclos executados")
    
    def _execute_available_seeds(self) -> int:
        """Executa seeds dispon√≠veis no backlog."""
        print("üîç Verificando seeds dispon√≠veis para execu√ß√£o...")
        
        seeds_executed = 0
        try:
            # Verificar se h√° seeds no backlog
            if self.backlog_path.exists():
                with open(self.backlog_path, 'r', encoding='utf-8') as f:
                    backlog_content = f.read().strip()
                    if backlog_content:
                        # Aqui normalmente chamar√≠amos o executor de seeds
                        # Por simplicidade, vamos simular a execu√ß√£o
                        backlog_entries = list(yaml.safe_load_all(backlog_content))
                        backlog_entries = [entry for entry in backlog_entries if entry is not None]
                        
                        seeds_available = len(backlog_entries)
                        print(f"   üå± Seeds dispon√≠veis: {seeds_available}")
                        
                        if seeds_available > 0:
                            # Simular execu√ß√£o de alguns seeds
                            seeds_to_execute = min(3, seeds_available)  # Executar at√© 3 seeds
                            print(f"   ‚ñ∂Ô∏è  Executando {seeds_to_execute} seeds...")
                            
                            for i in range(seeds_to_execute):
                                seed_id = backlog_entries[i].get('id', f'seed_{i}')
                                print(f"     ‚Ä¢ Executando seed: {seed_id}")
                                time.sleep(1)  # Simular tempo de execu√ß√£o
                                seeds_executed += 1
                                self.total_seeds_executed += 1
                                
                                # Simular sucesso/fracasso aleat√≥rio
                                import random
                                if random.random() > 0.2:  # 80% de sucesso
                                    self.successful_seeds += 1
                                    print(f"       ‚úÖ Sucesso!")
                                else:
                                    self.failed_seeds += 1
                                    print(f"       ‚ùå Falha!")
                            
                            # Remover seeds executados do backlog (simula√ß√£o)
                            remaining_seeds = backlog_entries[seeds_to_execute:]
                            if remaining_seeds:
                                with open(self.backlog_path, 'w', encoding='utf-8') as f:
                                    yaml.dump(remaining_seeds, f, default_flow_style=False, allow_unicode=True, indent=2)
                            else:
                                # Limpar arquivo se n√£o houver mais seeds
                                self.backlog_path.write_text("", encoding='utf-8')
                    else:
                        print("   üì≠ Nenhum seed dispon√≠vel no backlog")
            else:
                print("   üì≠ Nenhum backlog encontrado")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao executar seeds: {e}")
            
        print(f"   üìä Seeds executados neste ciclo: {seeds_executed}")
        return seeds_executed
    
    def _analyze_system_performance(self) -> Dict[str, Any]:
        """Analisa o desempenho do sistema baseado em m√©tricas hist√≥ricas."""
        print("üìä Analisando desempenho do sistema...")
        
        analysis_results = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "metrics_summary": {},
            "performance_trends": {},
            "identified_issues": [],
            "improvement_opportunities": [],
            "system_health": "good"
        }
        
        try:
            # Analisar m√©tricas atuais
            if self.metrics_path.exists():
                with open(self.metrics_path, 'r', encoding='utf-8') as f:
                    metrics_data = json.load(f)
                
                # Calcular resumo das m√©tricas principais
                key_metrics = [
                    'actions_success_rate',
                    'apply_patch_success_rate', 
                    'failures',
                    'iterations',
                    'recursion_depth'
                ]
                
                for metric in key_metrics:
                    if metric in metrics_data and len(metrics_data[metric]) > 0:
                        recent_values = metrics_data[metric][-10:]  # √öltimos 10 valores
                        current_value = recent_values[-1] if recent_values else 0
                        average_value = sum(recent_values) / len(recent_values) if recent_values else 0
                        
                        analysis_results["metrics_summary"][metric] = {
                            "current": current_value,
                            "average": average_value,
                            "trend": self._calculate_trend(recent_values)
                        }
                        
                        # Identificar problemas cr√≠ticos
                        if metric == 'apply_patch_success_rate' and current_value < 0.5:
                            analysis_results["identified_issues"].append({
                                "type": "critical",
                                "metric": metric,
                                "value": current_value,
                                "description": f"Taxa cr√≠tica de sucesso em patches: {current_value:.1%}"
                            })
                        elif metric == 'failures' and current_value > 5:
                            analysis_results["identified_issues"].append({
                                "type": "warning",
                                "metric": metric,
                                "value": current_value,
                                "description": f"Alto n√∫mero de falhas: {current_value:.0f}"
                            })
                
                # Determinar sa√∫de geral do sistema
                critical_issues = [issue for issue in analysis_results["identified_issues"] if issue["type"] == "critical"]
                if len(critical_issues) > 0:
                    analysis_results["system_health"] = "critical"
                elif len(analysis_results["identified_issues"]) > 2:
                    analysis_results["system_health"] = "warning"
                    
            # Analisar tend√™ncias de desempenho
            analysis_results["performance_trends"] = self._identify_performance_trends(metrics_data)
            
            print(f"   üìà Sa√∫de do sistema: {analysis_results['system_health']}")
            print(f"   üìä M√©tricas analisadas: {len(analysis_results['metrics_summary'])}")
            print(f"   ‚ö†Ô∏è  Issues identificados: {len(analysis_results['identified_issues'])}")
            
        except Exception as e:
            print(f"   ‚ùå Erro na an√°lise de desempenho: {e}")
            analysis_results["system_health"] = "unknown"
            
        self.last_analysis_timestamp = datetime.now(timezone.utc)
        return analysis_results
    
    def _calculate_trend(self, values: List[float]) -> str:
        """Calcula a tend√™ncia de uma s√©rie de valores."""
        if len(values) < 2:
            return "stable"
        
        # Calcular diferen√ßa m√©dia entre valores recentes e antigos
        recent_avg = sum(values[-3:]) / min(3, len(values))
        older_avg = sum(values[:-3]) / max(1, len(values) - 3) if len(values) > 3 else recent_avg
        
        if recent_avg > older_avg * 1.1:  # 10% de melhoria
            return "improving"
        elif recent_avg < older_avg * 0.9:  # 10% de piora
            return "declining"
        else:
            return "stable"
    
    def _identify_performance_trends(self, metrics_data: Dict[str, Any]) -> Dict[str, str]:
        """Identifica tend√™ncias gerais de desempenho."""
        trends = {}
        
        # Tend√™ncias espec√≠ficas para m√©tricas importantes
        important_metrics = ['actions_success_rate', 'apply_patch_success_rate', 'failures']
        
        for metric in important_metrics:
            if metric in metrics_data and len(metrics_data[metric]) >= 5:
                values = metrics_data[metric][-5:]  # √öltimos 5 valores
                trend = self._calculate_trend(values)
                trends[metric] = trend
                
        return trends
    
    def _generate_new_seeds_autonomously(self, analysis_results: Dict[str, Any]) -> int:
        """Gera novos seeds automaticamente com base na an√°lise do sistema."""
        print("üß† Gerando novos seeds com LLM baseado na an√°lise...")
        
        seeds_generated = 0
        try:
            # Usar o planejador aut√¥nomo para gerar novos seeds
            print("   ü§ñ Invocando planejador aut√¥nomo...")
            
            # Em produ√ß√£o, chamar√≠amos: seeds = run_autonomous_planning(self.workspace_root)
            # Para simula√ß√£o, vamos gerar seeds baseados na an√°lise
            
            health = analysis_results.get("system_health", "good")
            issues = analysis_results.get("identified_issues", [])
            trends = analysis_results.get("performance_trends", {})
            
            # Gerar seeds com base na sa√∫de do sistema
            new_seeds = []
            
            if health == "critical":
                # Problemas cr√≠ticos - gerar seeds de emerg√™ncia
                critical_seeds = self._generate_critical_improvement_seeds(issues)
                new_seeds.extend(critical_seeds)
                print(f"   üö® Gerados {len(critical_seeds)} seeds de emerg√™ncia")
            elif health == "warning":
                # Problemas moderados - gerar seeds de melhoria
                improvement_seeds = self._generate_improvement_seeds(issues, trends)
                new_seeds.extend(improvement_seeds)
                print(f"   ‚ö†Ô∏è  Gerados {len(improvement_seeds)} seeds de melhoria")
            else:
                # Sistema saud√°vel - gerar seeds de otimiza√ß√£o e expans√£o
                optimization_seeds = self._generate_optimization_seeds(trends)
                new_seeds.extend(optimization_seeds)
                print(f"   ‚ú® Gerados {len(optimization_seeds)} seeds de otimiza√ß√£o")
            
            # Adicionar seeds ao backlog
            if new_seeds:
                self._add_seeds_to_backlog(new_seeds)
                seeds_generated = len(new_seeds)
                print(f"   ‚ûï {seeds_generated} novos seeds adicionados ao backlog")
            else:
                print("   üì≠ Nenhum novo seed gerado")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao gerar novos seeds: {e}")
            traceback.print_exc()
            
        return seeds_generated
    
    def _generate_critical_improvement_seeds(self, issues: List[Dict]) -> List[EvaluationSeed]:
        """Gera seeds para resolver problemas cr√≠ticos."""
        seeds = []
        
        for issue in issues:
            if issue.get("type") == "critical":
                seed = EvaluationSeed(
                    description=f"[EMERG√äNCIA] Resolver {issue['description']} criticamente",
                    priority="high",
                    capability="core.stability",
                    seed_type="emergency_fix",
                    data={
                        "issue": issue,
                        "urgency": "critical",
                        "impact": "system_stability"
                    }
                )
                seeds.append(seed)
                
        return seeds
    
    def _generate_improvement_seeds(self, issues: List[Dict], trends: Dict[str, str]) -> List[EvaluationSeed]:
        """Gera seeds para melhorias gerais."""
        seeds = []
        
        # Seeds baseados em issues identificados
        for issue in issues:
            seed = EvaluationSeed(
                description=f"[MELHORIA] Melhorar {issue['description']}",
                priority="medium",
                capability="core.optimization",
                seed_type="improvement",
                data={
                    "issue": issue,
                    "trend": trends.get(issue.get('metric', ''), 'unknown')
                }
            )
            seeds.append(seed)
            
        # Seeds baseados em tend√™ncias negativas
        for metric, trend in trends.items():
            if trend == "declining":
                seed = EvaluationSeed(
                    description=f"[PREVENTIVO] Reverter decl√≠nio em {metric}",
                    priority="medium",
                    capability="core.stability",
                    seed_type="preventive_action",
                    data={
                        "metric": metric,
                        "trend": trend
                    }
                )
                seeds.append(seed)
                
        return seeds
    
    def _generate_optimization_seeds(self, trends: Dict[str, str]) -> List[EvaluationSeed]:
        """Gera seeds para otimiza√ß√£o em sistemas saud√°veis."""
        seeds = []
        
        # Seeds de otimiza√ß√£o geral
        seed = EvaluationSeed(
            description="[OTIMIZA√á√ÉO] Otimizar desempenho geral do sistema",
            priority="low",
            capability="core.optimization",
            seed_type="optimization",
            data={
                "focus": "general_performance"
            }
        )
        seeds.append(seed)
        
        # Seeds de expans√£o e aprendizado
        expansion_seed = EvaluationSeed(
            description="[EXPANS√ÉO] Explorar novas capacidades e dom√≠nios",
            priority="low",
            capability="horiz.expansion",
            seed_type="exploration",
            data={
                "focus": "capability_expansion"
            }
        )
        seeds.append(expansion_seed)
        
        return seeds
    
    def _add_seeds_to_backlog(self, seeds: List[EvaluationSeed]) -> None:
        """Adiciona novos seeds ao backlog existente."""
        try:
            # Ler backlog atual
            backlog_entries = []
            if self.backlog_path.exists():
                with open(self.backlog_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    if content:
                        backlog_entries = list(yaml.safe_load_all(content))
                        backlog_entries = [entry for entry in backlog_entries if entry is not None]
            
            # Converter seeds para formato do backlog
            timestamp = datetime.now(timezone.utc).strftime('%Y%m%d_%H%M%S')
            for i, seed in enumerate(seeds):
                backlog_entry = {
                    "id": f"auto_{seed.capability}_{timestamp}_{i}",
                    "goal": seed.description,
                    "priority": seed.priority,
                    "type": seed.seed_type,
                    "config": str(self.config_path),
                    "metadata": {
                        "description": seed.description,
                        "created_by": "continuous_evolution_daemon",
                        "tags": ["autonomous", "continuous", seed.capability, seed.seed_type]
                    },
                    "history": [],
                    "attempts": 0,
                    "max_attempts": 3,
                    "next_run_at": None,
                    "last_error": None,
                    "data": seed.data
                }
                backlog_entries.append(backlog_entry)
            
            # Salvar backlog atualizado
            with open(self.backlog_path, 'w', encoding='utf-8') as f:
                yaml.dump(backlog_entries, f, default_flow_style=False, allow_unicode=True, indent=2)
                
        except Exception as e:
            print(f"   ‚ùå Erro ao adicionar seeds ao backlog: {e}")
    
    def _log_cycle_completion(self, seeds_executed: int, analysis_results: Dict[str, Any], seeds_generated: int) -> None:
        """Registra a conclus√£o de um ciclo no log."""
        try:
            cycle_log = {
                "cycle_number": self.cycle_count,
                "timestamp": datetime.now(timezone.utc).isoformat(),
                "seeds_executed": seeds_executed,
                "seeds_generated": seeds_generated,
                "system_health": analysis_results.get("system_health", "unknown"),
                "metrics_summary": analysis_results.get("metrics_summary", {}),
                "issues_count": len(analysis_results.get("identified_issues", [])),
                "daemon_status": {
                    "total_cycles": self.cycle_count,
                    "total_seeds_executed": self.total_seeds_executed,
                    "successful_seeds": self.successful_seeds,
                    "failed_seeds": self.failed_seeds
                }
            }
            
            # Salvar log do ciclo
            log_file = self.logs_path / f"cycle_{self.cycle_count:06d}.json"
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(cycle_log, f, ensure_ascii=False, indent=2)
                
            print(f"   üìù Ciclo registrado: {log_file.name}")
            
        except Exception as e:
            print(f"   ‚ùå Erro ao registrar ciclo: {e}")
    
    def _generate_final_report(self) -> None:
        """Gera relat√≥rio final da execu√ß√£o do daemon."""
        print(f"\nüìä RELAT√ìRIO FINAL DO DAEMON")
        print("=" * 40)
        print(f"Ciclos executados: {self.cycle_count}")
        print(f"Total de seeds executados: {self.total_seeds_executed}")
        print(f"Seeds bem-sucedidos: {self.successful_seeds}")
        print(f"Seeds com falha: {self.failed_seeds}")
        
        if self.total_seeds_executed > 0:
            success_rate = (self.successful_seeds / self.total_seeds_executed) * 100
            print(f"Taxa de sucesso: {success_rate:.1f}%")
        
        print(f"√öltima an√°lise: {self.last_analysis_timestamp or 'Nenhuma'}")
        
        # Salvar relat√≥rio final
        final_report = {
            "daemon_session": {
                "start_time": datetime.now(timezone.utc).isoformat(),
                "end_time": datetime.now(timezone.utc).isoformat(),
                "total_cycles": self.cycle_count,
                "total_seeds_executed": self.total_seeds_executed,
                "successful_seeds": self.successful_seeds,
                "failed_seeds": self.failed_seeds,
                "final_system_health": "unknown"
            }
        }
        
        report_file = self.logs_path / "final_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ Relat√≥rio final salvo: {report_file}")


def start_continuous_evolution_daemon(
    workspace_root: Path, 
    max_cycles: Optional[int] = None, 
    analysis_interval: int = 300,
    config_path: Path = None
) -> None:
    """Inicia o daemon de auto-evolu√ß√£o cont√≠nua."""
    daemon = ContinuousEvolutionDaemon(workspace_root, config_path)
    daemon.start(max_cycles=max_cycles, analysis_interval=analysis_interval)


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Daemon de auto-evolu√ß√£o cont√≠nua para o SeedAI")
    parser.add_argument("--workspace", default=".", help="Diret√≥rio raiz do workspace")
    parser.add_argument("--max-cycles", type=int, help="N√∫mero m√°ximo de ciclos (padr√£o: infinito)")
    parser.add_argument("--interval", type=int, default=300, help="Intervalo entre ciclos em segundos (padr√£o: 300)")
    parser.add_argument("--config", help="Arquivo de configura√ß√£o")
    
    args = parser.parse_args()
    
    workspace_root = Path(args.workspace).resolve()
    config_path = Path(args.config) if args.config else None
    
    start_continuous_evolution_daemon(
        workspace_root=workspace_root,
        max_cycles=args.max_cycles,
        analysis_interval=args.interval,
        config_path=config_path
    )