#!/usr/bin/env python3
"""Script para iniciar o SeedAI em modo completamente aut√¥nomo para autoevolu√ß√£o."""

import sys
from pathlib import Path

# Adiciona o diret√≥rio do projeto ao path
sys.path.insert(0, str(Path(__file__).parent))

from a3x.seed_runner import main as seed_main


def start_autonomous_evolution():
    """Inicia o processo de evolu√ß√£o aut√¥noma do SeedAI."""
    print("üöÄ INICIANDO AUTO-EVOLU√á√ÉO AUT√îNOMA DO SEEDAI")
    print("=" * 60)

    # Verificar se temos seeds pendentes
    backlog_path = Path("seed/backlog.yaml")

    if not backlog_path.exists():
        print(f"‚ö†Ô∏è  Arquivo de backlog n√£o encontrado: {backlog_path}")
        print("   Criando backlog inicial...")
        backlog_path.parent.mkdir(parents=True, exist_ok=True)
        backlog_content = """# Backlog de seeds para autoevolu√ß√£o do SeedAI
- id: initial.self_awareness
  goal: "Analisar minhas pr√≥prias capacidades e identificar oportunidades de auto-aperfei√ßoamento"
  priority: high
  type: evolution
  config: configs/seed_manual.yaml
  metadata:
    description: "Seed inicial para autoavalia√ß√£o e autoevolu√ß√£o"
    created_by: "initial_setup"
    tags: ["self_awareness", "evolution", "optimization"]
  history: []
  attempts: 0
  max_attempts: 3
  next_run_at: null
  last_error: null
"""
        backlog_path.write_text(backlog_content)
        print(f"‚úÖ Backlog inicial criado: {backlog_path}")

    print(f"\nüìä VERIFICANDO BACKLOG EM: {backlog_path}")
    backlog_content = backlog_path.read_text()
    print(f"Conte√∫do atual do backlog:\n{backlog_content}")

    print("\nüìÇ VERIFICANDO CONFIGURA√á√ÉO EM: configs/seed_manual.yaml")
    if Path("configs/seed_manual.yaml").exists():
        config_content = Path("configs/seed_manual.yaml").read_text()
        print("Configura√ß√£o encontrada:")
        print(config_content[:500] + "..." if len(config_content) > 500 else config_content)
    else:
        print("‚ùå Arquivo de configura√ß√£o n√£o encontrado!")

    print("\nüîç VERIFICANDO SCRIPT EM: configs/scripts/demo_plan.yaml")
    if Path("configs/scripts/demo_plan.yaml").exists():
        script_content = Path("configs/scripts/demo_plan.yaml").read_text()
        print("Script encontrado:")
        print(script_content[:500] + "..." if len(script_content) > 500 else script_content)
    else:
        print("‚ùå Arquivo de script n√£o encontrado!")

    print("\nüéØ INICIANDO PRIMEIRA SEED DO BACKLOG...")
    print("(Esta execu√ß√£o iniciar√° o SeedAI no modo aut√¥nomo)")

    try:
        # Executar o seed runner com sys.argv
        sys.argv = ["seed_runner", "--backlog", str(backlog_path), "--config", "configs/seed_manual.yaml"]
        result_code = seed_main(sys.argv[1:])

        print(f"\n‚úÖ EXECU√á√ÉO CONCLU√çDA COM C√ìDIGO: {result_code}")

        return result_code

    except Exception as e:
        print(f"\n‚ùå ERRO DURANTE EXECU√á√ÉO: {e}")
        import traceback
        traceback.print_exc()
        return -1


def check_evolution_artifacts():
    """Verifica os artefatos da evolu√ß√£o do SeedAI."""
    print("\nüîç VERIFICANDO ARTEFATOS DE AUTO-EVOLU√á√ÉO:")

    dirs_to_check = [
        "seed/evaluations/",
        "seed/metrics/",
        "seed/reports/",
        "seed/changes/",
        "seed/consciousness/"
    ]

    for dir_path in dirs_to_check:
        path = Path(dir_path)
        if path.exists():
            files = list(path.glob("*"))
            print(f"  {dir_path}: {len(files)} arquivos")
            for file in files[:3]:  # Mostrar apenas os 3 primeiros
                print(f"    - {file.name}")
        else:
            print(f"  {dir_path}: (n√£o existe ainda)")


def main():
    """Fun√ß√£o principal para iniciar a autoevolu√ß√£o."""
    print("üåü INICIANDO SISTEMA DE AUTO-EVOLU√á√ÉO AUT√îNOMA")
    print("O SeedAI est√° prestes a come√ßar sua jornada de autoevolu√ß√£o cont√≠nua...")
    print()

    # Iniciar a autoevolu√ß√£o
    result = start_autonomous_evolution()

    # Verificar artefatos
    check_evolution_artifacts()

    print("\n" + "=" * 60)
    print("üéØ O SEEDAI EST√Å EM MODO AUTO-EVOLUTIVO!")
    print("   - Ele continuar√° gerando e executando seeds automaticamente")
    print("   - Monitorando m√©tricas de intelig√™ncia emergente")
    print("   - Expandindo suas pr√≥prias capacidades")
    print("   - Auto-avaliando seu pr√≥prio desempenho")
    print("=" * 60)

    return result


if __name__ == "__main__":
    main()
