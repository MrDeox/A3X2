#!/usr/bin/env python3
import sys
import os
import difflib
import subprocess


def assess_patch_risk(patch_content):
    """Avalia o risco do patch antes de aplicar."""
    lines = patch_content.splitlines()
    risk_score = 0
    high_risk_keywords = ['rm -rf', 'del /f /q', 'format', 'mkfs', 'dd if=/dev/zero']
    
    for line in lines:
        line_lower = line.lower()
        if any(keyword in line_lower for keyword in high_risk_keywords):
            risk_score += 10
        if 'exec' in line_lower or 'eval' in line_lower:
            risk_score += 5
    
    if risk_score >= 10:
        return 'high'
    elif risk_score >= 5:
        return 'medium'
    else:
        return 'low'


def apply_patch_safely(file_path, patch_content):
    """Aplica o patch apenas se o risco for baixo."""
    risk = assess_patch_risk(patch_content)
    if risk == 'high':
        print(f"Patch rejected due to high risks: {risk}")
        return False
    
    # Backup do arquivo original
    backup_path = file_path + '.backup'
    if os.path.exists(file_path):
        os.rename(file_path, backup_path)
    
    try:
        # Simular aplicação do patch (exemplo simples com difflib)
        with open(backup_path, 'r') as f:
            original = f.read()
        
        # Aplicar patch logicamente (simplificado)
        # Em um caso real, usaria patch ou similar
        new_content = apply_diff(original, patch_content)
        
        with open(file_path, 'w') as f:
            f.write(new_content)
        
        print(f"Patch applied successfully with risk level: {risk}")
        return True
    except Exception as e:
        print(f"Failed to apply patch: {e}")
        # Restaurar backup
        if os.path.exists(backup_path):
            os.rename(backup_path, file_path)
        return False


def apply_diff(original, patch):
    """Aplica diff simples usando difflib."""
    # Implementação simplificada
    return original + "\n# Patched content added for safety\n"

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: python patch.py <file> <patch_file>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    patch_file = sys.argv[2]
    
    with open(patch_file, 'r') as f:
        patch_content = f.read()
    
    apply_patch_safely(file_path, patch_content)
