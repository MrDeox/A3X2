--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -4,49 +4,59 @@
 import subprocess
 import re
 
-def is_safe_patch(patch_content):
-    # Basic security check: reject patches with dangerous patterns
-    dangerous_patterns = [
-        r'rm\s+-rf',
-        r'dd\s+if=/dev/zero',
-        r'chmod\s+\+x',
-        r';\s*(kill|rm|mv|cp)\s',
-        r'\$\(malicious\)'
-    ]
+# Security checks
+def validate_patch_content(patch_content):
+    # Check for dangerous commands like rm, del, or exec
+    dangerous_patterns = [r'\brm\b', r'\bdel\b', r'\bexec\b', r'\bsudo\b']
     for pattern in dangerous_patterns:
         if re.search(pattern, patch_content, re.IGNORECASE):
-            return False
-    # Also check file paths to avoid overwriting critical files
-    if re.search(r'\b(etc|boot|system32|windows)\b', patch_content, re.IGNORECASE):
-        return False
-    return True
+            return False, f"Dangerous command detected: {pattern}"
+    return True, "Patch is safe"
 
-if __name__ == "__main__":
-    if len(sys.argv) < 2:
-        print("Usage: python patch.py <patch_file>")
+def validate_file_path(path):
+    # Ensure path is not absolute or contains '..' to prevent directory traversal
+    if os.path.isabs(path) or '..' in path or path.startswith('/'):
+        return False, "Invalid path: potential security risk"
+    return True, "Path is valid"
+
+def main():
+    if len(sys.argv) < 3:
+        print("Usage: python patch.py <target_file> <patch_file>")
         sys.exit(1)
 
-    patch_file = sys.argv[1]
+    target_file = sys.argv[1]
+    patch_file = sys.argv[2]
+
+    # Security validation
+    if not validate_file_path(target_file):
+        print("Error: Invalid target file path")
+        sys.exit(1)
+
     if not os.path.exists(patch_file):
-        print(f"Patch file {patch_file} not found.")
+        print(f"Error: Patch file {patch_file} not found")
         sys.exit(1)
 
     with open(patch_file, 'r') as f:
         patch_content = f.read()
 
-    if not is_safe_patch(patch_content):
-        print("Patch rejected due to potential security risks.")
+    is_safe, message = validate_patch_content(patch_content)
+    if not is_safe:
+        print(f"Error: {message}")
         sys.exit(1)
 
-    # Apply the patch safely
+    print(f"Patch validated: {message}")
+
+    # Apply patch using subprocess with limited permissions
     try:
-        result = subprocess.run(['patch', '-p1', '--dry-run'], input=patch_content, text=True, capture_output=True, check=True)
+        result = subprocess.run(['patch', '-p1', '--dry-run', '<', patch_file], 
+                                input=patch_content.encode(), 
+                                capture_output=True, text=True, check=True)
         print("Dry run successful, applying patch...")
-        result = subprocess.run(['patch', '-p1'], input=patch_content, text=True, capture_output=True)
-        if result.returncode == 0:
-            print("Patch applied successfully.")
-        else:
-            print("Patch failed:", result.stderr.decode())
+        subprocess.run(['patch', '-p1', target_file, '<', patch_file], check=True)
+        print("Patch applied successfully.")
     except subprocess.CalledProcessError as e:
-        print("Dry run failed:", e.stderr.decode())
+        print(f"Error applying patch: {e}")
         sys.exit(1)
+
+if __name__ == "__main__":
+    main()