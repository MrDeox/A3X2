--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,53 +1,73 @@
 import sys
 import os
 import subprocess
+import argparse
 
-def apply_patch(patchfile):
-    if not os.path.isfile(patchfile):
-        print(f"Error: {patchfile} not found or not a file.")
+
+def sanitize_path(path):
+    """Sanitize path to prevent directory traversal."""
+    abs_path = os.path.abspath(os.path.expanduser(path))
+    if not os.path.exists(abs_path):
+        raise ValueError(f"Path does not exist: {path}")
+    # Check if path is within allowed directory (e.g., current working dir)
+    if not abs_path.startswith(os.getcwd()):
+        raise ValueError(f"Path traversal detected: {path}")
+    return abs_path
+
+
+def validate_file_permissions(file_path, mode='r'):
+    """Validate file permissions before access."""
+    if not os.access(file_path, os.R_OK):
+        raise PermissionError(f"No read permission for: {file_path}")
+    if mode == 'w' and not os.access(os.path.dirname(file_path) or '.', os.W_OK):
+        raise PermissionError(f"No write permission for directory of: {file_path}")
+
+
+def apply_secure_patch(patch_file, target_dir, strip_level=1):
+    """Apply patch securely using subprocess with shell=False."""
+    patch_file = sanitize_path(patch_file)
+    target_dir = sanitize_path(target_dir)
+    
+    validate_file_permissions(patch_file)
+    validate_file_permissions(target_dir, 'w')
+    
+    cmd = [
+        'patch',
+        f'-p{strip_level}',
+        '-i', patch_file,
+        '-d', target_dir,
+        '--dry-run'  # Optional: dry run first for safety
+    ]
+    
+    try:
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        if result.returncode == 0:
+            print("Dry run successful. Applying patch...")
+            # Remove --dry-run for actual apply
+            cmd.remove('--dry-run')
+            subprocess.run(cmd, check=True)
+            print("Patch applied successfully.")
+        else:
+            print(f"Dry run failed: {result.stderr}")
+            raise subprocess.CalledProcessError(result.returncode, cmd)
+    except subprocess.CalledProcessError as e:
+        print(f"Error applying patch: {e}")
         sys.exit(1)
-    if not os.access(patchfile, os.R_OK):
-        print(f"Error: No read permission for {patchfile}.")
+    except FileNotFoundError:
+        print("'patch' command not found. Ensure it's installed.")
         sys.exit(1)
 
-    # Security check: Warn if running as root
-    if os.getuid() == 0:
-        print("Warning: Running as root. Proceed? (y/n)")
-        response = input().strip().lower()
-        if response != 'y':
-            sys.exit(1)
 
-    # Check if current directory is writable and safe (not system dir)
-    current_dir = os.getcwd()
-    if not os.access(current_dir, os.W_OK):
-        print(f"Error: No write permission in {current_dir}.")
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser(description='Apply patches securely.')
+    parser.add_argument('patch_file', help='Path to the patch file')
+    parser.add_argument('-d', '--directory', default='.', help='Target directory (default: current)')
+    parser.add_argument('-p', '--strip', type=int, default=1, help='Strip level (default: 1)')
+    
+    args = parser.parse_args()
+    
+    try:
+        apply_secure_patch(args.patch_file, args.directory, args.strip)
+    except (ValueError, PermissionError) as e:
+        print(f"Security check failed: {e}")
         sys.exit(1)
-    if current_dir.startswith(('/etc', '/bin', '/usr', '/var/log')):
-        print("Error: Cannot apply patches to system directories.")
-        sys.exit(1)
-
-    try:
-        # Dry run first
-        result = subprocess.run(['patch', '-p1', '--dry-run', patchfile], 
-                                capture_output=True, text=True, check=True)
-        print("Dry run successful. Proceeding with patch application.")
-
-        # Apply patch
-        result = subprocess.run(['patch', '-p1', patchfile], 
-                                capture_output=True, text=True, check=True)
-        print("Patch applied successfully.")
-        if result.stdout:
-            print("Output:", result.stdout)
-    except subprocess.CalledProcessError as e:
-        print(f"Error applying patch: {e}")
-        if e.stdout:
-            print("Stdout:", e.stdout)
-        if e.stderr:
-            print("Stderr:", e.stderr)
-        sys.exit(1)
-
-if __name__ == "__main__":
-    if len(sys.argv) != 2:
-        print("Usage: python patch.py <patchfile>")
-        sys.exit(1)
-    apply_patch(sys.argv[1])
