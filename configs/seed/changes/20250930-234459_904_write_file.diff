--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,89 +1,63 @@
 #!/usr/bin/env python3
 import sys
 import os
+import subprocess
+import tempfile
+import difflib
 import re
-import subprocess
-from difflib import SequenceMatcher
 
-
-def check_security_patch(patch_content):
-    """Check patch for potential security risks."""
+# Security checks
+def validate_patch_content(patch_content):
+    # Check for dangerous patterns: exec, eval, system calls, etc.
     dangerous_patterns = [
-        r'os\.(system|pop(?:en|en2))\s*\(',  # os.system, os.popen, etc.
-        r'eval\s*\(',
-        r'exec\s*\(',
-        r'__import__\s*\(',
-        r'subprocess\.(call|Popen)\s*\(',
-        r'rm\s+[-rf]',  # rm -rf
-        r'dd\s+if=',  # potential overwrite
-        r'chmod\s+[0-7]+\s+/',  # changing permissions broadly
+        r'exec\(', r'eval\(', r'__import__\(', r'subprocess\.', r'os\.(system|pop en|popen)',
+        r'open\(', r'file\(', r'\$\(',
     ]
     for pattern in dangerous_patterns:
         if re.search(pattern, patch_content, re.IGNORECASE):
             return False, f"Dangerous pattern detected: {pattern}"
-    return True, "Patch appears safe"
+    return True, "Patch is safe"
 
-
-def apply_patch_safely(patch_file, target_dir='.'):
-    """Apply a patch with security checks."""
-    if not os.path.exists(patch_file):
-        print(f"Patch file {patch_file} not found.")
-        return False
-
+def apply_patch_safely(patch_file, target_file, strip=0):
+    # Read patch content
     with open(patch_file, 'r') as f:
         patch_content = f.read()
-
-    is_safe, message = check_security_patch(patch_content)
-    print(message)
+    
+    # Validate patch
+    is_safe, message = validate_patch_content(patch_content)
     if not is_safe:
-        response = input("Do you want to apply anyway? (y/N): ")
-        if response.lower() != 'y':
-            return False
-
-    # Change to target directory
-    original_cwd = os.getcwd()
+        print(f"Security check failed: {message}")
+        return 1
+    
+    # Create backup
+    backup_file = target_file + '.backup'
+    if os.path.exists(target_file):
+        os.rename(target_file, backup_file)
+    
+    # Apply patch using patch command with safety
+    cmd = ['patch', f'--strip={strip}', target_file, '--input=' + patch_file, '--backup', '--verbose']
     try:
-        os.chdir(target_dir)
-        # Use patch command with restrictions
-        result = subprocess.run(
-            ['patch', '-p1', '--dry-run'],
-            input=patch_content.encode(),
-            capture_output=True,
-            text=True
-        )
-        if result.returncode != 0:
-            print("Dry run failed, patch may not apply cleanly.")
-            return False
-
-        # If dry run ok, apply for real
-        confirm = input("Dry run successful. Apply patch? (y/N): ")
-        if confirm.lower() == 'y':
-            result = subprocess.run(
-                ['patch', '-p1'],
-                input=patch_content.encode(),
-                capture_output=True,
-                text=True
-            )
-            if result.returncode == 0:
-                print("Patch applied successfully.")
-                return True
-            else:
-                print(f"Failed to apply patch: {result.stderr}")
-                return False
-        else:
-            print("Patch not applied.")
-            return False
-    finally:
-        os.chdir(original_cwd)
-
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        print("Patch applied successfully.")
+        return 0
+    except subprocess.CalledProcessError as e:
+        print(f"Patch application failed: {e}")
+        # Restore backup if failed
+        if os.path.exists(backup_file):
+            os.rename(backup_file, target_file)
+        return 1
 
 if __name__ == '__main__':
-    if len(sys.argv) < 2:
-        print("Usage: python3 patch.py <patch_file> [target_dir]")
+    if len(sys.argv) < 3:
+        print("Usage: python3 patch.py <patch_file> <target_file> [strip_level]")
         sys.exit(1)
-
+    
     patch_file = sys.argv[1]
-    target_dir = sys.argv[2] if len(sys.argv) > 2 else '.'
-
-    success = apply_patch_safely(patch_file, target_dir)
-    sys.exit(0 if success else 1)
+    target_file = sys.argv[2]
+    strip = int(sys.argv[3]) if len(sys.argv) > 3 else 0
+    
+    if not os.path.exists(patch_file):
+        print(f"Patch file not found: {patch_file}")
+        sys.exit(1)
+    
+    sys.exit(apply_patch_safely(patch_file, target_file, strip))
