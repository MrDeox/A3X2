--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,3 +1,4 @@
+#!/usr/bin/env python3
 import sys
 import os
 import subprocess
@@ -5,48 +6,73 @@
 import shutil
 
 
-def validate_patch(patch_file):
-    if not os.path.exists(patch_file):
-        raise FileNotFoundError(f"Patch file {patch_file} not found.")
-    with open(patch_file, 'r') as f:
-        content = f.read()
-    # Basic validation: check for suspicious commands
-    suspicious_patterns = ['rm -rf', 'exec', ';', '|']
+def validate_patch(patch_content):
+    """Basic validation of patch content to prevent malicious patches."""
+    if not patch_content.strip():
+        return False, "Patch is empty"
+    # Check for suspicious commands or patterns
+    suspicious_patterns = ['rm -rf', 'del /f', ';', '|', '&&', '`', '$(']
     for pattern in suspicious_patterns:
-        if pattern in content:
-            raise ValueError(f"Suspicious pattern '{pattern}' found in patch.")
-    return True
+        if pattern in patch_content:
+            return False, f"Suspicious pattern '{pattern}' detected"
+    return True, "Patch validated"
 
 
-def apply_patch(patch_file, target_dir='.'):
-    # Security checks
-    if not os.path.exists(target_dir):
-        raise FileNotFoundError(f"Target directory {target_dir} not found.")
+def apply_patch_safely(patch_file, target_file, dry_run=False):
+    """Apply patch with safety checks."""
+    if not os.path.exists(target_file):
+        return False, f"Target file {target_file} does not exist"
     
-    validate_patch(patch_file)
+    if not os.path.exists(patch_file):
+        return False, f"Patch file {patch_file} does not exist"
     
-    # Use temporary directory for safe application
-    with tempfile.TemporaryDirectory() as temp_dir:
-        shutil.copytree(target_dir, temp_dir, dirs_exist_ok=True)
-        
-        cmd = ['patch', '-p1', '-d', temp_dir]
-        try:
-            result = subprocess.run(cmd, input=open(patch_file, 'rb').read(), check=True, capture_output=True, text=False)
-            print("Patch applied successfully in temp dir.")
-            # Optionally, copy back or verify
-            shutil.rmtree(temp_dir)
-        except subprocess.CalledProcessError as e:
-            print(f"Patch failed: {e}")
-            raise
+    # Backup original file
+    backup_file = target_file + '.backup'
+    if os.path.exists(backup_file):
+        os.remove(backup_file)
+    shutil.copy2(target_file, backup_file)
+    
+    # Read and validate patch
+    with open(patch_file, 'r') as f:
+        patch_content = f.read()
+    is_valid, msg = validate_patch(patch_content)
+    if not is_valid:
+        # Restore backup if needed, but since we just copied, no need
+        return False, msg
+    
+    # Use patch command with safety options
+    cmd = ['patch', '-p1', '--dry-run' if dry_run else '', target_file, '--backup', '--verbose']
+    cmd = [arg for arg in cmd if arg]  # Remove empty strings
+    
+    try:
+        result = subprocess.run(cmd, input=patch_content.encode(), capture_output=True, text=True, check=True)
+        if dry_run:
+            return True, "Dry run successful"
+        else:
+            return True, "Patch applied successfully"
+    except subprocess.CalledProcessError as e:
+        # Restore from backup on failure
+        if os.path.exists(backup_file):
+            shutil.copy2(backup_file, target_file)
+        return False, f"Patch failed: {e.stderr}"
+    finally:
+        if os.path.exists(backup_file):
+            os.remove(backup_file)
+
+
+def main():
+    if len(sys.argv) < 3:
+        print("Usage: python patch.py <patch_file> <target_file> [--dry-run]")
+        sys.exit(1)
+    
+    patch_file = sys.argv[1]
+    target_file = sys.argv[2]
+    dry_run = '--dry-run' in sys.argv
+    
+    success, msg = apply_patch_safely(patch_file, target_file, dry_run)
+    print(msg)
+    sys.exit(0 if success else 1)
+
 
 if __name__ == '__main__':
-    if len(sys.argv) < 2:
-        print("Usage: python patch.py <patch_file> [target_dir]")
-        sys.exit(1)
-    patch_file = sys.argv[1]
-    target_dir = sys.argv[2] if len(sys.argv) > 2 else '.'
-    try:
-        apply_patch(patch_file, target_dir)
-    except Exception as e:
-        print(f"Error: {e}")
-        sys.exit(1)
+    main()