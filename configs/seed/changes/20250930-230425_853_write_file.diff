--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -4,59 +4,46 @@
 import subprocess
 import re
 
-# Security checks
-def validate_patch_content(patch_content):
-    # Check for dangerous commands like rm, del, or exec
-    dangerous_patterns = [r'\brm\b', r'\bdel\b', r'\bexec\b', r'\bsudo\b']
-    for pattern in dangerous_patterns:
+# Security checks function
+def security_check(patch_content):
+    high_risk_patterns = [
+        r'subprocess\.call\(\s*["\']rm["\'][^,]*,',
+        r'os\.system\(\s*["\']del["\'][^,]*,',
+        r'exec\(\s*["\'][^;]*;',
+        r'eval\(\s*input\(\s*',
+        # Add more patterns for dangerous operations
+    ]
+    for pattern in high_risk_patterns:
         if re.search(pattern, patch_content, re.IGNORECASE):
-            return False, f"Dangerous command detected: {pattern}"
-    return True, "Patch is safe"
+            return {'patch_apply': 'high'}
+    return None
 
-def validate_file_path(path):
-    # Ensure path is not absolute or contains '..' to prevent directory traversal
-    if os.path.isabs(path) or '..' in path or path.startswith('/'):
-        return False, "Invalid path: potential security risk"
-    return True, "Path is valid"
-
-def main():
-    if len(sys.argv) < 3:
-        print("Usage: python patch.py <target_file> <patch_file>")
-        sys.exit(1)
-
-    target_file = sys.argv[1]
-    patch_file = sys.argv[2]
-
-    # Security validation
-    if not validate_file_path(target_file):
-        print("Error: Invalid target file path")
-        sys.exit(1)
-
-    if not os.path.exists(patch_file):
-        print(f"Error: Patch file {patch_file} not found")
-        sys.exit(1)
-
+# Main patch application with security
+def apply_secure_patch(patch_file):
     with open(patch_file, 'r') as f:
         patch_content = f.read()
-
-    is_safe, message = validate_patch_content(patch_content)
-    if not is_safe:
-        print(f"Error: {message}")
-        sys.exit(1)
-
-    print(f"Patch validated: {message}")
-
-    # Apply patch using subprocess with limited permissions
+    risks = security_check(patch_content)
+    if risks:
+        print(f"Patch rejected due to high risks: {risks}")
+        return False
     try:
-        result = subprocess.run(['patch', '-p1', '--dry-run', '<', patch_file], 
-                                input=patch_content.encode(), 
-                                capture_output=True, text=True, check=True)
-        print("Dry run successful, applying patch...")
-        subprocess.run(['patch', '-p1', target_file, '<', patch_file], check=True)
-        print("Patch applied successfully.")
-    except subprocess.CalledProcessError as e:
-        print(f"Error applying patch: {e}")
-        sys.exit(1)
+        result = subprocess.run(['patch', '-p1', '<', patch_file], capture_output=True, text=True)
+        if result.returncode == 0:
+            print("Patch applied successfully.")
+            return True
+        else:
+            print(f"Failed to apply patch: {result.stderr}")
+            return False
+    except Exception as e:
+        print(f"Error: {e}")
+        return False
 
 if __name__ == "__main__":
-    main()+    if len(sys.argv) != 2:
+        print("Usage: python patch.py <patch_file>")
+        sys.exit(1)
+    patch_file = sys.argv[1]
+    if not os.path.exists(patch_file):
+        print("Patch file not found.")
+        sys.exit(1)
+    apply_secure_patch(patch_file)
