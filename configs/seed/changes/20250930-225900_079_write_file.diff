--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -3,39 +3,57 @@
 import subprocess
 import re
 
-def has_dangerous_commands(patch_content):
-    dangerous_patterns = [r'rm\s+-rf\s+', r'del\s+/f\s+', r'format\s+c:', r'shred\s+-u']
-    for pattern in dangerous_patterns:
-        if re.search(pattern, patch_content, re.IGNORECASE):
-            return True
-    return False
+# Security checks
+def validate_patch_file(patch_path):
+    if not os.path.exists(patch_path):
+        raise ValueError(f"Patch file {patch_path} does not exist")
+    if not os.path.isfile(patch_path):
+        raise ValueError(f"{patch_path} is not a file")
+    # Basic validation: check if it's a text file and contains diff-like content
+    with open(patch_path, 'r') as f:
+        content = f.read()
+    if not re.search(r'^\+\+\+|diff ', content, re.MULTILINE):
+        raise ValueError("Invalid patch format")
+    return True
 
-if len(sys.argv) < 2:
-    print("Usage: python patch.py <patchfile> [target_dir]")
-    sys.exit(1)
+def validate_target_dir(target_dir):
+    if not os.path.exists(target_dir):
+        raise ValueError(f"Target directory {target_dir} does not exist")
+    if not os.path.isdir(target_dir):
+        raise ValueError(f"{target_dir} is not a directory")
+    # Ensure it's not a system directory
+    forbidden_dirs = ['/etc', '/usr', '/var', '/boot', '/root']
+    abs_path = os.path.abspath(target_dir)
+    for forbidden in forbidden_dirs:
+        if abs_path.startswith(forbidden):
+            raise ValueError(f"Target directory {target_dir} is forbidden for security reasons")
+    return True
 
-patchfile = sys.argv[1]
-target_dir = sys.argv[2] if len(sys.argv) > 2 else '.'
+def apply_secure_patch(patch_path, target_dir, strip=0):
+    validate_patch_file(patch_path)
+    validate_target_dir(target_dir)
+    
+    cmd = ['patch', '-p', str(strip), '-d', target_dir, '-i', patch_path, '--dry-run']
+    try:
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        if result.returncode != 0:
+            raise RuntimeError(f"Dry run failed: {result.stderr}")
+        print("Dry run successful, applying patch...")
+        cmd[-1] = '--force'  # Remove --dry-run
+        subprocess.run(cmd, check=True)
+        print("Patch applied successfully")
+    except subprocess.CalledProcessError as e:
+        raise RuntimeError(f"Patch application failed: {e}")
 
-try:
-    with open(patchfile, 'r') as f:
-        patch_content = f.read()
-
-    if has_dangerous_commands(patch_content):
-        print("Patch rejected: Dangerous commands detected.")
+if __name__ == '__main__':
+    if len(sys.argv) < 3:
+        print("Usage: python patch.py <patch_file> <target_dir> [strip_level]")
         sys.exit(1)
-
-    os.chdir(target_dir)
-    result = subprocess.run(['patch', '-p1'], input=patch_content, text=True, capture_output=True)
-    if result.returncode != 0:
-        print("Patch failed:")
-        print(result.stderr)
-    else:
-        print("Patch applied successfully.")
-        print(result.stdout)
-except FileNotFoundError:
-    print(f"Patch file '{patchfile}' not found.")
-    sys.exit(1)
-except Exception as e:
-    print(f"Error: {e}")
-    sys.exit(1)
+    patch_path = sys.argv[1]
+    target_dir = sys.argv[2]
+    strip = int(sys.argv[3]) if len(sys.argv) > 3 else 0
+    try:
+        apply_secure_patch(patch_path, target_dir, strip)
+    except Exception as e:
+        print(f"Error: {e}")
+        sys.exit(1)
