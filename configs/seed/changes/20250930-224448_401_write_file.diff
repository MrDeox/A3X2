--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,46 +1,51 @@
 import sys
 import subprocess
 import os
+import argparse
 
-def is_safe_target(target):
-    # Simple security check: avoid patching system directories
-    system_dirs = ['/etc', '/bin', '/usr', '/var', '/root']
-    if target and any(target.startswith(d) for d in system_dirs):
-        return False
-    return True
+# Security checks
+def validate_path(path):
+    if not os.path.exists(path):
+        raise ValueError(f"Path does not exist: {path}")
+    if os.path.islink(path):
+        raise ValueError(f"Symbolic links not allowed: {path}")
+    if not os.access(path, os.R_OK):
+        raise ValueError(f"No read permission: {path}")
+    return path
 
 def main():
-    if len(sys.argv) < 2:
-        print("Usage: python patch.py <patchfile> [target_file]")
+    parser = argparse.ArgumentParser(description='Secure patch applicator')
+    parser.add_argument('-p', '--strip', type=int, default=0, help='Strip directory levels')
+    parser.add_argument('patchfile', help='Patch file')
+    parser.add_argument('target', nargs='?', help='Target file/directory')
+
+    args = parser.parse_args()
+
+    # Security: Validate inputs
+    try:
+        validate_path(args.patchfile)
+        if args.target:
+            validate_path(args.target)
+    except ValueError as e:
+        print(f"Security error: {e}", file=sys.stderr)
         sys.exit(1)
 
-    patchfile = sys.argv[1]
-    target = sys.argv[2] if len(sys.argv) > 2 else None
+    # Build patch command with security
+    cmd = ['patch', '-p' + str(args.strip)]
+    if args.target:
+        cmd.extend(['-i', args.patchfile, args.target])
+    else:
+        cmd.extend(['-i', args.patchfile])
 
-    print("Applying patch with basic security checks...")
-
-    if target and not is_safe_target(target):
-        print("Security violation: Cannot patch system directories.")
+    # Run with error checking
+    try:
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        print(result.stdout)
+    except subprocess.CalledProcessError as e:
+        print(f"Patch failed: {e.stderr}", file=sys.stderr)
         sys.exit(1)
-
-    # Additional check: ensure patch file exists
-    if not os.path.exists(patchfile):
-        print(f"Error: Patch file '{patchfile}' not found.")
-        sys.exit(1)
-
-    try:
-        cmd = ['patch', '-p1', '-i', patchfile]
-        if target:
-            cmd += [f"{target}"]  # Specify target if provided
-
-        result = subprocess.run(cmd, capture_output=True, text=True)
-        if result.returncode != 0:
-            print(f"Patch failed: {result.stderr}")
-            sys.exit(1)
-        print(result.stdout)
-        print("Patch applied successfully with security checks.")
-    except Exception as e:
-        print(f"Error applying patch: {e}")
+    except FileNotFoundError:
+        print("patch command not found", file=sys.stderr)
         sys.exit(1)
 
 if __name__ == '__main__':
