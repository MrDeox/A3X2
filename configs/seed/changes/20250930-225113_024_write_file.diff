--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -2,47 +2,39 @@
 import os
 import subprocess
 
+# Verificações de segurança básicas
+if len(sys.argv) < 2:
+    print("Uso: python patch.py <arquivo_patch> [arquivo_alvo]")
+    sys.exit(1)
 
-def validate_path(path):
-    """Validate and sanitize file path to prevent directory traversal."""
-    if not path or '..' in path or path.startswith('/'):
-        raise ValueError(f"Invalid path: {path}")
-    abs_path = os.path.abspath(path)
-    if not os.path.exists(abs_path):
-        raise FileNotFoundError(f"File not found: {abs_path}")
-    if not os.access(abs_path, os.R_OK | os.W_OK):
-        raise PermissionError(f"Insufficient permissions for: {abs_path}")
-    return abs_path
+patchfile = sys.argv[1]
+if not os.path.exists(patchfile):
+    print("Erro: Arquivo de patch não encontrado: " + patchfile)
+    sys.exit(1)
 
+# Verificar se o patch não é malicioso (exemplo simples: tamanho limite)
+if os.path.getsize(patchfile) > 1024 * 1024:  # 1MB limite
+    print("Erro: Patch muito grande, possível risco de segurança.")
+    sys.exit(1)
 
-def apply_secure_patch(original_file, patch_file):
-    """Apply patch securely using subprocess with shell=False."""
-    try:
-        original = validate_path(original_file)
-        patch = validate_path(patch_file)
+if len(sys.argv) > 2:
+    target = sys.argv[2]
+    if not os.path.exists(target):
+        print("Aviso: Arquivo alvo não encontrado: " + target)
+        # Não falhar, deixar patch decidir
+    cmd = ['patch', '-i', patchfile, target]
+else:
+    cmd = ['patch', '-i', patchfile]
 
-        # Use subprocess with list args to avoid shell injection
-        cmd = ['patch', '-p1', '-i', patch, original]
-        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
-
-        if result.returncode == 0:
-            print(f"Patch applied successfully to {original}")
-            print(result.stdout)
-        else:
-            print(f"Patch failed: {result.stderr}")
-            return False
-        return True
-    except (ValueError, FileNotFoundError, PermissionError, subprocess.CalledProcessError) as e:
-        print(f"Error applying patch: {e}")
-        return False
-
-
-if __name__ == "__main__":
-    if len(sys.argv) != 3:
-        print("Usage: python patch.py <original_file> <patch_file>")
-        sys.exit(1)
-
-    original_file = sys.argv[1]
-    patch_file = sys.argv[2]
-
-    apply_secure_patch(original_file, patch_file)
+# Executar com verificação de retorno
+try:
+    result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+    print("Patch aplicado com sucesso.")
+    print(result.stdout)
+except subprocess.CalledProcessError as e:
+    print("Falha ao aplicar patch:")
+    print(e.stderr)
+    sys.exit(1)
+except FileNotFoundError:
+    print("Erro: Comando 'patch' não encontrado no sistema.")
+    sys.exit(1)
