--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -4,55 +4,52 @@
 import re
 
 # Security checks
-def validate_patch_content(patch_content):
-    # Check for dangerous patterns, e.g., shell commands or file overwrites
-    dangerous_patterns = [
-        r'\b(rm|del|format|mkfs)\b',
-        r'\b(exec|system|eval)\b',
-        r'\b(open|file)\s*\(\s*["\\/]\w*\.(sh|bat|exe)\b',
-        r'\b(subprocess|os.system)\b'
-    ]
+def validate_patch(patch_content):
+    # Basic validation: ensure it's a diff format
+    if not re.search(r'^diff --git', patch_content, re.MULTILINE):
+        raise ValueError('Invalid patch format')
+    # Check for dangerous commands (e.g., no rm, no exec)
+    dangerous_patterns = [r'rm\s', r'exec\s', r'sudo\s']
     for pattern in dangerous_patterns:
         if re.search(pattern, patch_content, re.IGNORECASE):
-            return False, f"Dangerous pattern found: {pattern}"
-    return True, "Patch validated"
+            raise ValueError('Patch contains dangerous operations')
+    return True
 
-def apply_secure_patch(patch_file):
-    with open(patch_file, 'r') as f:
-        patch_content = f.read()
-    
-    is_valid, message = validate_patch_content(patch_content)
-    if not is_valid:
-        print(f"Security check failed: {message}")
-        return 1
-    
-    print("Patch passed security checks.")
-    
-    # Apply patch with dry-run first
-    try:
-        result = subprocess.run(['patch', '--dry-run', '-p1'], input=patch_content, text=True, capture_output=True)
-        if result.returncode != 0:
-            print("Dry-run failed:", result.stderr)
-            return 1
-        print("Dry-run successful. Applying patch.")
-        result = subprocess.run(['patch', '-p1'], input=patch_content, text=True, capture_output=True)
-        if result.returncode != 0:
-            print("Patch application failed:", result.stderr)
-            return 1
-        print("Patch applied successfully.")
-        return 0
-    except Exception as e:
-        print(f"Error applying patch: {e}")
-        return 1
+def validate_target_file(target_path):
+    if not os.path.exists(target_path):
+        raise FileNotFoundError(f'Target file {target_path} does not exist')
+    if not os.access(target_path, os.R_OK | os.W_OK):
+        raise PermissionError(f'Insufficient permissions for {target_path}')
+    return True
 
 if __name__ == '__main__':
-    if len(sys.argv) != 2:
-        print("Usage: python patch.py <patch_file>")
+    if len(sys.argv) < 3:
+        print('Usage: python patch.py <target_file> <patch_file>')
         sys.exit(1)
     
-    patch_file = sys.argv[1]
-    if not os.path.exists(patch_file):
-        print(f"Patch file not found: {patch_file}")
+    target = sys.argv[1]
+    patch_file = sys.argv[2]
+    
+    try:
+        validate_target_file(target)
+        
+        with open(patch_file, 'r') as f:
+            patch_content = f.read()
+        validate_patch(patch_content)
+        
+        # Apply patch safely
+        result = subprocess.run(['patch', '-p1', '--dry-run', target], input=patch_content, text=True, capture_output=True)
+        if result.returncode != 0:
+            print('Dry run failed:', result.stderr)
+            sys.exit(1)
+        
+        # If dry run ok, apply
+        result = subprocess.run(['patch', '-p1', target], input=patch_content, text=True, capture_output=True)
+        if result.returncode == 0:
+            print('Patch applied successfully')
+        else:
+            print('Patch failed:', result.stderr)
+            sys.exit(1)
+    except Exception as e:
+        print(f'Security check failed: {e}')
         sys.exit(1)
-    
-    sys.exit(apply_secure_patch(patch_file))
