--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -3,63 +3,57 @@
 import subprocess
 
 
-def apply_patch(patch_content, target_file):
-    # Security check: Ensure target file exists and is writable
-    if not os.path.exists(target_file):
-        print(f"Error: Target file {target_file} does not exist.")
-        return False
-    if not os.access(target_file, os.W_OK):
-        print(f"Error: No write permission for {target_file}.")
-        return False
+def validate_inputs(file_path, patch_path):
+    if not os.path.isfile(file_path):
+        raise ValueError(f"Target file '{file_path}' does not exist or is not a file.")
+    if not os.path.isfile(patch_path):
+        raise ValueError(f"Patch file '{patch_path}' does not exist or is not a file.")
+    # Additional security: Check if paths are within allowed directory
+    allowed_dir = os.getcwd()
+    if not (os.path.abspath(file_path).startswith(allowed_dir) and os.path.abspath(patch_path).startswith(allowed_dir)):
+        raise ValueError("Files must be within the current working directory for security.")
+    # Basic content validation for patch (e.g., starts with diff header)
+    with open(patch_path, 'r') as f:
+        content = f.read(100)  # Read first 100 chars
+        if not content.startswith(('diff', 'Index:', '---')):
+            raise ValueError("Patch file does not appear to be a valid diff.")
 
-    # Security check: Limit patch size to prevent large malicious inputs
-    if len(patch_content) > 10000:
-        print("Error: Patch too large, potential security risk.")
-        return False
 
-    # Write patch to temporary file
-    with open('temp.patch', 'w') as f:
-        f.write(patch_content)
+def apply_patch_safely(file_path, patch_path):
+    try:
+        # Use subprocess with shell=False and list for security
+        cmd = ['patch', '-p1', file_path, '-i', patch_path, '--dry-run']
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        if result.returncode == 0:
+            print("Dry run successful. Applying patch...")
+            cmd = ['patch', '-p1', file_path, '-i', patch_path]
+            subprocess.run(cmd, check=True)
+            print("Patch applied successfully.")
+        else:
+            print("Patch would fail: ", result.stderr)
+            raise subprocess.CalledProcessError(result.returncode, cmd)
+    except subprocess.CalledProcessError as e:
+        print(f"Error applying patch: {e}")
+        sys.exit(1)
+    except Exception as e:
+        print(f"Unexpected error: {e}")
+        sys.exit(1)
+
+
+def main():
+    if len(sys.argv) != 3:
+        print("Usage: python patch.py <target_file> <patch_file>")
+        sys.exit(1)
+
+    target_file = sys.argv[1]
+    patch_file = sys.argv[2]
 
     try:
-        # Dry run first for safety
-        result = subprocess.run(['patch', '--dry-run', '-p1', '-i', 'temp.patch', '--forward'], 
-                                capture_output=True, text=True, cwd=os.path.dirname(target_file))
-        if result.returncode != 0:
-            print("Dry run failed: Patch would not apply cleanly.")
-            print(result.stderr)
-            return False
-
-        # Apply the patch if dry run succeeds
-        result = subprocess.run(['patch', '-p1', '-i', 'temp.patch', '--forward'], 
-                                capture_output=True, text=True, cwd=os.path.dirname(target_file))
-        if result.returncode == 0:
-            print("Patch applied successfully.")
-            return True
-        else:
-            print("Patch application failed.")
-            print(result.stderr)
-            return False
-    except Exception as e:
-        print(f"Error during patch application: {e}")
-        return False
-    finally:
-        # Clean up temp file
-        if os.path.exists('temp.patch'):
-            os.remove('temp.patch')
-
-if __name__ == "__main__":
-    if len(sys.argv) < 3:
-        print("Usage: python patch.py <patch_file> <target_file>")
+        validate_inputs(target_file, patch_file)
+        apply_patch_safely(target_file, patch_file)
+    except ValueError as e:
+        print(f"Validation error: {e}")
         sys.exit(1)
 
-    patch_file = sys.argv[1]
-    target_file = sys.argv[2]
-
-    try:
-        with open(patch_file, 'r') as f:
-            patch_content = f.read()
-        apply_patch(patch_content, target_file)
-    except FileNotFoundError:
-        print(f"Error: Patch file {patch_file} not found.")
-        sys.exit(1)
+if __name__ == '__main__':
+    main()
