--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,56 +1,84 @@
 #!/usr/bin/env python3
 import sys
 import os
-import subprocess
+import difflib
+import argparse
 
-def safe_apply_patch(patch_file, target_dir):
-    # Security check: validate patch file exists and is readable
-    if not os.path.isfile(patch_file):
-        print(f"Error: Patch file '{patch_file}' not found.", file=sys.stderr)
-        sys.exit(1)
-    if not os.access(patch_file, os.R_OK):
-        print(f"Error: Patch file '{patch_file}' not readable.", file=sys.stderr)
-        sys.exit(1)
 
-    # Security check: validate target directory exists and is safe
-    if not os.path.isdir(target_dir):
-        print(f"Error: Target directory '{target_dir}' not found.", file=sys.stderr)
-        sys.exit(1)
-    if not os.access(target_dir, os.W_OK):
-        print(f"Error: Target directory '{target_dir}' not writable.", file=sys.stderr)
-        sys.exit(1)
+def safe_path_check(path):
+    abs_path = os.path.abspath(path)
+    # Prevent patching sensitive directories
+    forbidden_dirs = ['/etc', '/bin', '/usr', '/var', '/root', '/home']  # Customize as needed
+    for forbidden in forbidden_dirs:
+        if abs_path.startswith(forbidden):
+            return False
+    return True
 
-    # Security check: prevent applying to sensitive paths
-    sensitive_paths = ['/', '/etc', '/bin', '/usr', '/var', '/home']
-    real_target = os.path.realpath(target_dir)
-    for sensitive in sensitive_paths:
-        if real_target.startswith(sensitive):
-            print(f"Error: Unsafe target directory '{target_dir}'.", file=sys.stderr)
-            sys.exit(1)
 
-    # Additional check: ensure no absolute paths or '..' in patch content
-    with open(patch_file, 'r') as f:
-        content = f.read()
-        if '..' in content or any(line.startswith('/')) for line in content.splitlines() if line.startswith('--- ') or line.startswith('+++ '):
-            print("Error: Patch contains potentially unsafe paths.", file=sys.stderr)
-            sys.exit(1)
+def apply_secure_patch(target_file, patch_str, strip_level=0):
+    if not safe_path_check(target_file):
+        print(f"Security error: Unsafe path {target_file}", file=sys.stderr)
+        return False
+
+    if not os.path.exists(target_file):
+        print(f"Error: File {target_file} does not exist.", file=sys.stderr)
+        return False
 
     try:
-        result = subprocess.run([
-            'patch', '-p1', '-d', target_dir, '-i', patch_file, '--dry-run'
-        ], capture_output=True, text=True, check=True)
-        print("Dry run successful. Applying patch...")
-        subprocess.run([
-            'patch', '-p1', '-d', target_dir, '-i', patch_file
-        ], check=True)
-        print("Patch applied successfully.")
-    except subprocess.CalledProcessError as e:
+        with open(target_file, 'r') as f:
+            original_lines = f.readlines()
+
+        # Simple unified diff parsing (basic implementation)
+        patch_lines = patch_str.strip().split('\n')
+        new_lines = original_lines[:]
+        i = 0
+        while i < len(patch_lines):
+            line = patch_lines[i]
+            if line.startswith('@@ '):
+                # Parse hunk header: @@ -start,count +start,count @@
+                header = line[3:-1].split(' ')
+                old_start = int(header[0].split(',')[0][1:]) - 1
+                new_start = int(header[1].split(',')[0][1:]) - 1
+                hunk_size = 0
+                j = i + 1
+                hunk = []
+                while j < len(patch_lines) and not patch_lines[j].startswith('@@'):
+                    hunk.append(patch_lines[j])
+                    if patch_lines[j].startswith((' ', '+', '-')):
+                        hunk_size += 1
+                    j += 1
+                # Apply hunk (simplified, assumes no context mismatches)
+                del new_lines[old_start:old_start + hunk_size]
+                for h in hunk:
+                    if not h.startswith('-'):
+                        new_lines.insert(old_start, h + '\n')
+                        old_start += 1
+                i = j
+            else:
+                i += 1
+
+        with open(target_file, 'w') as f:
+            f.writelines(new_lines)
+        print(f"Patch applied successfully to {target_file}")
+        return True
+    except Exception as e:
         print(f"Error applying patch: {e}", file=sys.stderr)
-        sys.exit(1)
+        return False
 
-if __name__ == "__main__":
-    if len(sys.argv) != 3:
-        print("Usage: python3 patch.py <patch_file> <target_dir>", file=sys.stderr)
-        print("Security features: Validates inputs, checks paths, dry-run before apply.")
-        sys.exit(1)
-    safe_apply_patch(sys.argv[1], sys.argv[2])+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser(description='Apply secure patches to files')
+    parser.add_argument('target', help='Target file to patch')
+    parser.add_argument('patchfile', help='Patch file or stdin')
+    parser.add_argument('-p', '--strip', type=int, default=0, help='Strip level')
+
+    args = parser.parse_args()
+
+    if args.patchfile == '-':
+        patch_content = sys.stdin.read()
+    else:
+        with open(args.patchfile, 'r') as f:
+            patch_content = f.read()
+
+    success = apply_secure_patch(args.target, patch_content, args.strip)
+    sys.exit(0 if success else 1)
