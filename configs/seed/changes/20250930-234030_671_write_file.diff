--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -2,68 +2,37 @@
 import sys
 import os
 import subprocess
-import tempfile
-import shutil
+import re
 
+# Security checks
+def validate_patch_file(patch_path):
+    if not os.path.exists(patch_path):
+        raise FileNotFoundError(f"Patch file not found: {patch_path}")
+    with open(patch_path, 'r') as f:
+        content = f.read()
+    # Check for dangerous patterns, e.g., modifying system files
+    dangerous_patterns = [r'/etc/', r'/bin/', r'/usr/']
+    for pattern in dangerous_patterns:
+        if re.search(pattern, content, re.IGNORECASE):
+            raise ValueError(f"Potential security risk: patch targets {pattern}")
+    return True
 
-def validate_patch(patch_content):
-    """Valida o conteúdo do patch para riscos de segurança."""
-    risks = []
-    if 'rm -rf' in patch_content or 'del /f /q' in patch_content:
-        risks.append('Potencial comando destrutivo detectado')
-    if len(patch_content) > 10000:
-        risks.append('Patch muito grande, risco de overflow')
-    return risks
-
-
-def apply_secure_patch(patch_file, target_dir):
-    """Aplica o patch de forma segura."""
-    if not os.path.exists(target_dir):
-        print(f"Diretório alvo não existe: {target_dir}")
-        return False
-
-    with open(patch_file, 'r') as f:
-        patch_content = f.read()
-
-    risks = validate_patch(patch_content)
-    if risks:
-        print(f"Riscos detectados: {risks}")
-        return False
-
-    # Cria backup
-    backup_dir = target_dir + '.backup'
-    if os.path.exists(backup_dir):
-        shutil.rmtree(backup_dir)
-    shutil.copytree(target_dir, backup_dir)
-
+def apply_patch_safely(patch_path, target_dir='.'):
     try:
-        result = subprocess.run(['patch', '-p1', '-d', target_dir], input=patch_content, text=True, capture_output=True)
-        if result.returncode != 0:
-            print(f"Falha ao aplicar patch: {result.stderr.decode()}")
-            # Restaura backup
-            shutil.rmtree(target_dir)
-            shutil.copytree(backup_dir, target_dir)
-            return False
-        print("Patch aplicado com sucesso.")
-        return True
+        validate_patch_file(patch_path)
+        cmd = ['patch', '-p1', '-d', target_dir, '-i', patch_path]
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        if result.returncode == 0:
+            print("Patch applied successfully.")
+        else:
+            print(f"Patch failed: {result.stderr}")
     except Exception as e:
-        print(f"Erro: {e}")
-        # Restaura backup
-        shutil.rmtree(target_dir)
-        shutil.copytree(backup_dir, target_dir)
-        return False
-
-
-if __name__ == '__main__':
-    if len(sys.argv) != 3:
-        print("Uso: python3 patch.py <patch_file> <target_dir>")
+        print(f"Error applying patch: {e}")
         sys.exit(1)
 
+if __name__ == "__main__":
+    if len(sys.argv) < 2:
+        print("Usage: python patch.py <patch_file>")
+        sys.exit(1)
     patch_file = sys.argv[1]
-    target_dir = sys.argv[2]
-
-    if not os.path.isfile(patch_file):
-        print(f"Arquivo de patch não encontrado: {patch_file}")
-        sys.exit(1)
-
-    apply_secure_patch(patch_file, target_dir)
+    apply_patch_safely(patch_file)
