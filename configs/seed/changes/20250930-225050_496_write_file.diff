--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,84 +1,54 @@
 import sys
 import os
 import subprocess
-import tempfile
-import shutil
-import re
 
-# Security checks
-def validate_patch_content(patch_content):
-    # Basic validation: ensure it's a unified diff
-    if not re.search(r'^\+{3}', patch_content, re.MULTILINE):
-        return False, "Invalid patch format: missing +++ header"
-    if not re.search(r'^\-{3}', patch_content, re.MULTILINE):
-        return False, "Invalid patch format: missing --- header"
-    # Check for dangerous commands (e.g., rm, exec)
-    dangerous_patterns = [r'rm\s+.*', r'exec\s+.*', r'sudo\s+.*']
-    for pattern in dangerous_patterns:
-        if re.search(pattern, patch_content, re.IGNORECASE):
-            return False, f"Security violation: dangerous command '{pattern}' detected"
-    return True, "Patch validated"
 
-def confirm_apply(target_file):
-    print(f"Warning: About to apply patch to {target_file}. This may overwrite data.")
-    response = input("Do you want to proceed? (y/N): ").strip().lower()
-    return response == 'y'
+def validate_path(path):
+    """Validate and sanitize file path to prevent directory traversal."""
+    if not path or '..' in path or path.startswith('/'):
+        raise ValueError(f"Invalid path: {path}")
+    abs_path = os.path.abspath(path)
+    if not os.path.exists(abs_path):
+        raise FileNotFoundError(f"Path does not exist: {abs_path}")
+    if not os.access(abs_path, os.R_OK | os.W_OK):
+        raise PermissionError(f"Insufficient permissions for: {abs_path}")
+    return abs_path
 
-def safe_apply_patch(patch_file, target_dir='.'):
-    if not os.path.exists(patch_file):
-        print(f"Error: Patch file {patch_file} not found.")
-        return False
-    
-    with open(patch_file, 'r') as f:
-        patch_content = f.read()
-    
-    is_valid, msg = validate_patch_content(patch_content)
-    if not is_valid:
-        print(f"Validation failed: {msg}")
-        return False
-    
-    # Find target files from patch
-    target_files = re.findall(r'^---\s+(a/)?(.*)', patch_content, re.MULTILINE)
-    for _, target in target_files:
-        target_path = os.path.join(target_dir, target.strip())
-        if not os.path.exists(os.path.dirname(target_path)):
-            print(f"Error: Directory for {target_path} does not exist.")
-            return False
-        if not confirm_apply(target_path):
-            print("Apply cancelled by user.")
-            return False
-    
-    # Use temp dir for safety
-    with tempfile.TemporaryDirectory() as temp_dir:
-        temp_patch = os.path.join(temp_dir, 'patch')
-        shutil.copy(patch_file, temp_patch)
-        
-        cmd = ['patch', '-p1', '-d', target_dir, '--dry-run']
-        result = subprocess.run(cmd + [temp_patch], capture_output=True, text=True)
-        if result.returncode != 0:
-            print(f"Dry run failed: {result.stderr}")
-            return False
-        
-        print("Dry run successful. Applying patch...")
-        cmd = ['patch', '-p1', '-d', target_dir]
-        result = subprocess.run(cmd + [temp_patch], capture_output=True, text=True)
-        if result.returncode == 0:
-            print("Patch applied successfully.")
-            return True
-        else:
-            print(f"Apply failed: {result.stderr}")
-            return False
 
-if __name__ == '__main__':
-    if len(sys.argv) < 2:
-        print("Usage: python patch.py <patch_file> [target_dir]")
+def apply_secure_patch(patch_file, target_file):
+    """Apply patch securely using subprocess with shell=False."""
+    try:
+        patch_path = validate_path(patch_file)
+        target_path = validate_path(target_file)
+
+        # Use subprocess with list of args to avoid shell injection
+        result = subprocess.run(
+            ['patch', '-i', patch_path, target_path],
+            capture_output=True,
+            text=True,
+            check=True
+        )
+
+        print("Patch applied successfully.")
+        print(result.stdout)
+        if result.stderr:
+            print("Warnings:", result.stderr)
+
+    except subprocess.CalledProcessError as e:
+        print(f"Patch failed: {e}")
+        print(e.stderr)
         sys.exit(1)
-    
+    except (ValueError, FileNotFoundError, PermissionError) as e:
+        print(f"Error: {e}")
+        sys.exit(1)
+
+
+if __name__ == "__main__":
+    if len(sys.argv) != 3:
+        print("Usage: python patch.py <patch_file> <target_file>")
+        sys.exit(1)
+
     patch_file = sys.argv[1]
-    target_dir = sys.argv[2] if len(sys.argv) > 2 else '.'
-    
-    if not os.access(target_dir, os.W_OK):
-        print(f"Error: No write permission for {target_dir}")
-        sys.exit(1)
-    
-    safe_apply_patch(patch_file, target_dir)
+    target_file = sys.argv[2]
+
+    apply_secure_patch(patch_file, target_file)
