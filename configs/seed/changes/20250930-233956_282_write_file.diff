--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -6,93 +6,60 @@
 import shutil
 
 
-def validate_patch_content(patch_content):
-    """Basic validation to detect potential malicious content in patch."""
-    risky_patterns = [
-        b'rm -rf',
-        b'dd if=/dev/zero',
-        b'chmod +x',
-        b'/etc/passwd',
-        b'exec',
-        b'system('
-    ]
-    for pattern in risky_patterns:
-        if pattern in patch_content:
-            return False, f"Risky pattern detected: {pattern}"
-    return True, "Patch validated"
-
-
 def is_safe_path(path):
-    """Check for directory traversal or absolute paths."""
+    """Check if the path is safe to operate on."""
+    # Avoid absolute paths outside current directory or sensitive areas
     if os.path.isabs(path):
         return False
-    if '..' in path or path.startswith('/'):
-        return False
+    # Check for dangerous patterns
+    dangerous = ['..', '/tmp/', '/var/', '/etc/']
+    for d in dangerous:
+        if d in path:
+            return False
     return True
 
 
-def main():
-    if len(sys.argv) < 2:
-        print("Usage: python3 patch.py <patch_file> [target_dir]")
-        sys.exit(1)
+def apply_patch_safely(patch_content, target_file):
+    """Apply patch with safety checks."""
+    if not is_safe_path(target_file):
+        print(f"Error: Unsafe path {target_file}", file=sys.stderr)
+        return False
+    
+    if not os.path.exists(target_file):
+        print(f"Error: Target file {target_file} does not exist.", file=sys.stderr)
+        return False
+    
+    # Create backup
+    backup = target_file + '.bak'
+    shutil.copy2(target_file, backup)
+    
+    # Write patch to temp file
+    with tempfile.NamedTemporaryFile(mode='w', suffix='.patch', delete=False) as f:
+        f.write(patch_content)
+        patch_file = f.name
+    
+    try:
+        # Run patch command with safety options
+        cmd = ['patch', '-p1', '--backup', '--verbose', target_file, patch_file]
+        result = subprocess.run(cmd, capture_output=True, text=True)
+        if result.returncode != 0:
+            print(f"Patch failed: {result.stderr}", file=sys.stderr)
+            return False
+        print(f"Patch applied successfully to {target_file}")
+        return True
+    except Exception as e:
+        print(f"Error applying patch: {e}", file=sys.stderr)
+        return False
+    finally:
+        os.unlink(patch_file)
 
-    patch_file = sys.argv[1]
-    target_dir = sys.argv[2] if len(sys.argv) > 2 else os.getcwd()
-
-    # Security check 1: Validate patch file existence and permissions
-    if not os.path.isfile(patch_file):
-        print(f"Error: Patch file '{patch_file}' not found.")
-        sys.exit(1)
-
-    if not os.access(patch_file, os.R_OK):
-        print(f"Error: Cannot read patch file '{patch_file}'.")
-        sys.exit(1)
-
-    # Security check 2: Ensure target directory is safe
-    if not is_safe_path(target_dir):
-        print(f"Error: Unsafe target directory '{target_dir}'.")
-        sys.exit(1)
-
-    if not os.path.isdir(target_dir):
-        print(f"Error: Target '{target_dir}' is not a directory.")
-        sys.exit(1)
-
-    # Security check 3: Read and validate patch content
-    try:
-        with open(patch_file, 'rb') as f:
-            patch_content = f.read()
-        is_valid, msg = validate_patch_content(patch_content)
-        if not is_valid:
-            print(f"Security error: {msg}")
-            sys.exit(1)
-        print(f"Patch validation: {msg}")
-    except IOError as e:
-        print(f"Error reading patch file: {e}")
-        sys.exit(1)
-
-    # Security check 4: Apply patch in a temporary directory first (sandbox)
-    try:
-        with tempfile.TemporaryDirectory() as temp_dir:
-            # Copy target to temp for dry-run like test
-            shutil.copytree(target_dir, os.path.join(temp_dir, 'test'), dirs_exist_ok=True)
-            cmd = ['patch', '-p1', '-d', os.path.join(temp_dir, 'test'), '-i', patch_file, '--dry-run']
-            result = subprocess.run(cmd, capture_output=True, text=True)
-            if result.returncode != 0:
-                print(f"Dry-run failed: {result.stderr}")
-                sys.exit(1)
-            print("Dry-run successful.")
-
-        # If dry-run passes, apply to real target
-        cmd = ['patch', '-p1', '-d', target_dir, '-i', patch_file]
-        result = subprocess.run(cmd, capture_output=True, text=True)
-        if result.returncode == 0:
-            print("Patch applied successfully.")
-        else:
-            print(f"Patch application failed: {result.stderr}")
-            sys.exit(1)
-    except Exception as e:
-        print(f"Error during patch application: {e}")
-        sys.exit(1)
 
 if __name__ == '__main__':
-    main()+    if len(sys.argv) != 3:
+        print("Usage: python3 patch.py <patch_content> <target_file>", file=sys.stderr)
+        sys.exit(1)
+    
+    patch_content = sys.argv[1]
+    target_file = sys.argv[2]
+    
+    apply_patch_safely(patch_content, target_file)
