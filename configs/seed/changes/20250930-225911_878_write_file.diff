--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,59 +1,53 @@
 import sys
 import os
 import subprocess
-import re
+import argparse
 
 # Security checks
-def validate_patch_file(patch_path):
-    if not os.path.exists(patch_path):
-        raise ValueError(f"Patch file {patch_path} does not exist")
-    if not os.path.isfile(patch_path):
-        raise ValueError(f"{patch_path} is not a file")
-    # Basic validation: check if it's a text file and contains diff-like content
-    with open(patch_path, 'r') as f:
-        content = f.read()
-    if not re.search(r'^\+\+\+|diff ', content, re.MULTILINE):
-        raise ValueError("Invalid patch format")
-    return True
+def is_safe_path(base_dir, path):
+    abs_base = os.path.abspath(base_dir)
+    abs_path = os.path.abspath(path)
+    return abs_path.startswith(abs_base)
 
-def validate_target_dir(target_dir):
-    if not os.path.exists(target_dir):
-        raise ValueError(f"Target directory {target_dir} does not exist")
-    if not os.path.isdir(target_dir):
-        raise ValueError(f"{target_dir} is not a directory")
-    # Ensure it's not a system directory
-    forbidden_dirs = ['/etc', '/usr', '/var', '/boot', '/root']
-    abs_path = os.path.abspath(target_dir)
-    for forbidden in forbidden_dirs:
-        if abs_path.startswith(forbidden):
-            raise ValueError(f"Target directory {target_dir} is forbidden for security reasons")
-    return True
+def main():
+    parser = argparse.ArgumentParser(description='Apply patches safely')
+    parser.add_argument('--file', required=True, help='File to patch')
+    parser.add_argument('--patch', required=True, help='Patch file')
+    parser.add_argument('--strip', type=int, default=0, help='Strip level')
+    args = parser.parse_args()
 
-def apply_secure_patch(patch_path, target_dir, strip=0):
-    validate_patch_file(patch_path)
-    validate_target_dir(target_dir)
-    
-    cmd = ['patch', '-p', str(strip), '-d', target_dir, '-i', patch_path, '--dry-run']
+    # Security: Validate paths
+    if not os.path.exists(args.file):
+        print(f"Error: File {args.file} does not exist.", file=sys.stderr)
+        sys.exit(1)
+
+    if not os.path.exists(args.patch):
+        print(f"Error: Patch {args.patch} does not exist.", file=sys.stderr)
+        sys.exit(1)
+
+    # Ensure we're not patching outside the project dir (assume current dir is project root)
+    project_dir = os.getcwd()
+    if not is_safe_path(project_dir, args.file):
+        print(f"Error: {args.file} is outside the project directory.", file=sys.stderr)
+        sys.exit(1)
+
+    # Check permissions
+    if not os.access(args.file, os.W_OK):
+        print(f"Error: No write permission for {args.file}.", file=sys.stderr)
+        sys.exit(1)
+
+    # Apply patch
+    cmd = ['patch', '--strip=' + str(args.strip), args.file, args.patch]
     try:
-        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
-        if result.returncode != 0:
-            raise RuntimeError(f"Dry run failed: {result.stderr}")
-        print("Dry run successful, applying patch...")
-        cmd[-1] = '--force'  # Remove --dry-run
-        subprocess.run(cmd, check=True)
-        print("Patch applied successfully")
+        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
+        print("Patch applied successfully.")
+        if result.stdout:
+            print(result.stdout)
     except subprocess.CalledProcessError as e:
-        raise RuntimeError(f"Patch application failed: {e}")
+        print(f"Patch failed: {e}", file=sys.stderr)
+        if e.stderr:
+            print(e.stderr, file=sys.stderr)
+        sys.exit(1)
 
 if __name__ == '__main__':
-    if len(sys.argv) < 3:
-        print("Usage: python patch.py <patch_file> <target_dir> [strip_level]")
-        sys.exit(1)
-    patch_path = sys.argv[1]
-    target_dir = sys.argv[2]
-    strip = int(sys.argv[3]) if len(sys.argv) > 3 else 0
-    try:
-        apply_secure_patch(patch_path, target_dir, strip)
-    except Exception as e:
-        print(f"Error: {e}")
-        sys.exit(1)
+    main()
