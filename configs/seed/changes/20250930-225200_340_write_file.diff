--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,72 +1,62 @@
 import sys
 import os
 import subprocess
-import re
 import argparse
 
-class SecurePatchApplier:
-    def __init__(self):
-        self.target_files = []
-        self.sensitive_paths = ['/etc/', '/root/', '/var/log/']
 
-    def validate_target(self, target_path):
-        if not os.path.exists(target_path):
-            raise ValueError(f"Target file does not exist: {target_path}")
-        if not os.access(target_path, os.R_OK | os.W_OK):
-            raise PermissionError(f"Insufficient permissions for {target_path}")
-        for sensitive in self.sensitive_paths:
-            if target_path.startswith(sensitive):
-                raise SecurityError(f"Cannot patch sensitive path: {target_path}")
-        return True
+def sanitize_path(path):
+    """Sanitize path to prevent directory traversal."""
+    if '..' in path or '/' in path.split(os.sep)[0]:
+        raise ValueError("Invalid path: potential directory traversal")
+    return os.path.abspath(path)
 
-    def sanitize_diff(self, diff_content):
-        # Basic sanitization: remove any shell commands or dangerous patterns
-        dangerous_patterns = [r'\$\(.*?\)', r';\s*rm\s', r'\|']
-        for pattern in dangerous_patterns:
-            if re.search(pattern, diff_content):
-                raise SecurityError("Diff contains potentially dangerous content")
-        return diff_content
 
-    def apply_secure_patch(self, diff_file, target=None):
-        try:
-            with open(diff_file, 'r') as f:
-                diff_content = f.read()
-            diff_content = self.sanitize_diff(diff_content)
-            if target:
-                self.validate_target(target)
-                # Write sanitized diff to temp file
-                temp_diff = '/tmp/sanitized_patch.diff'
-                with open(temp_diff, 'w') as f:
-                    f.write(diff_content)
-                # Use subprocess with safe args
-                cmd = ['patch', '-p1', '-i', temp_diff, target]
-                result = subprocess.run(cmd, capture_output=True, text=True, check=True)
-                os.remove(temp_diff)
-                return result.stdout
-        except subprocess.CalledProcessError as e:
-            raise PatchError(f"Patch application failed: {e.stderr}")
-        except Exception as e:
-            raise PatchError(f"Security check failed: {str(e)}")
+def validate_file_exists(path, mode='r'):
+    """Check if file exists and has read permissions."""
+    if not os.path.exists(path):
+        raise FileNotFoundError(f"File not found: {path}")
+    if not os.access(path, os.R_OK if mode == 'r' else os.W_OK):
+        raise PermissionError(f"No {mode} permissions for: {path}")
 
-    def parse_args(self):
-        parser = argparse.ArgumentParser(description='Secure patch applicator')
-        parser.add_argument('diff_file', help='Path to diff file')
-        parser.add_argument('-t', '--target', help='Target file')
-        return parser.parse_args()
 
-class SecurityError(Exception):
-    pass
+def apply_patch(patch_file, target_file, strip=0):
+    """Apply patch securely using subprocess."""
+    # Validate inputs
+    patch_file = sanitize_path(patch_file)
+    target_file = sanitize_path(target_file)
+    validate_file_exists(patch_file, 'r')
+    if os.path.exists(target_file):
+        validate_file_exists(target_file, 'r')
+    else:
+        # For patching, target might not exist yet, but ensure directory is writable
+        target_dir = os.path.dirname(target_file)
+        if target_dir and not os.access(target_dir, os.W_OK):
+            raise PermissionError(f"No write permissions for directory: {target_dir}")
 
-class PatchError(Exception):
-    pass
+    # Use subprocess with shell=False to avoid injection
+    cmd = ['patch', '-p', str(strip), '-i', patch_file, target_file]
+    try:
+        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
+        print("Patch applied successfully.")
+        print(result.stdout)
+    except subprocess.CalledProcessError as e:
+        print(f"Patch failed: {e}")
+        print(e.stderr)
+        raise
+    except FileNotFoundError:
+        raise RuntimeError("'patch' command not found. Ensure it's installed.")
 
-if __name__ == '__main__':
-    applier = SecurePatchApplier()
-    args = applier.parse_args()
+
+if __name__ == "__main__":
+    parser = argparse.ArgumentParser(description="Apply patches securely.")
+    parser.add_argument('patch_file', help="Path to the patch file")
+    parser.add_argument('target_file', help="Path to the target file")
+    parser.add_argument('-p', '--strip', type=int, default=0, help="Strip level")
+    
+    args = parser.parse_args()
+    
     try:
-        output = applier.apply_secure_patch(args.diff_file, args.target)
-        print("Patch applied successfully:")
-        print(output)
-    except (SecurityError, PatchError, ValueError, PermissionError) as e:
-        print(f"Error: {str(e)}", file=sys.stderr)
+        apply_patch(args.patch_file, args.target_file, args.strip)
+    except Exception as e:
+        print(f"Error: {e}", file=sys.stderr)
         sys.exit(1)
