--- a/patch.py
+++ b/patch.py
--- patch.py
+++ patch.py
@@ -1,54 +1,62 @@
 import sys
 import os
 import subprocess
+import tempfile
+import shutil
 
+ def validate_diff(diff_content):
+    # Basic validation: check if it's a unified diff
+    if not diff_content.startswith('---') or not diff_content.strip().endswith('diff'):
+        raise ValueError('Invalid diff format')
+    return True
 
-def validate_path(path):
-    """Validate and sanitize file path to prevent directory traversal."""
-    if not path or '..' in path or path.startswith('/'):
-        raise ValueError(f"Invalid path: {path}")
-    abs_path = os.path.abspath(path)
-    if not os.path.exists(abs_path):
-        raise FileNotFoundError(f"Path does not exist: {abs_path}")
-    if not os.access(abs_path, os.R_OK | os.W_OK):
-        raise PermissionError(f"Insufficient permissions for: {abs_path}")
-    return abs_path
+def safe_apply_patch(target_file, diff_file):
+    if not os.path.exists(target_file):
+        raise FileNotFoundError(f'Target file {target_file} does not exist')
+    if not os.access(target_file, os.R_OK | os.W_OK):
+        raise PermissionError(f'No read/write access to {target_file}')
+    
+    # Create backup
+    backup = target_file + '.backup'
+    if os.path.exists(backup):
+        os.remove(backup)
+    shutil.copy2(target_file, backup)
+    
+    try:
+        with tempfile.NamedTemporaryFile(mode='w', suffix='.diff', delete=False) as tmp_diff:
+            tmp_diff.write(diff_file.read())
+            tmp_diff_path = tmp_diff.name
+        
+        cmd = ['patch', '-p0', '--backup', '--verbose', target_file]
+        result = subprocess.run(cmd, input=diff_file.read(), capture_output=True, text=True)
+        
+        if result.returncode != 0:
+            # Restore backup
+            shutil.copy2(backup, target_file)
+            raise subprocess.CalledProcessError(result.returncode, cmd, result.stdout, result.stderr)
+        
+        os.remove(backup)
+        os.unlink(tmp_diff_path)
+        
+    except Exception as e:
+        if os.path.exists(backup):
+            shutil.copy2(backup, target_file)
+        raise e
 
-
-def apply_secure_patch(patch_file, target_file):
-    """Apply patch securely using subprocess with shell=False."""
+if __name__ == '__main__':
+    if len(sys.argv) != 3:
+        print('Usage: python patch.py <target_file> <diff_file>')
+        sys.exit(1)
+    
+    target = sys.argv[1]
+    diff_path = sys.argv[2]
+    
     try:
-        patch_path = validate_path(patch_file)
-        target_path = validate_path(target_file)
-
-        # Use subprocess with list of args to avoid shell injection
-        result = subprocess.run(
-            ['patch', '-i', patch_path, target_path],
-            capture_output=True,
-            text=True,
-            check=True
-        )
-
-        print("Patch applied successfully.")
-        print(result.stdout)
-        if result.stderr:
-            print("Warnings:", result.stderr)
-
-    except subprocess.CalledProcessError as e:
-        print(f"Patch failed: {e}")
-        print(e.stderr)
+        with open(diff_path, 'r') as f:
+            validate_diff(f.read())
+            f.seek(0)  # Reset for reading again
+            safe_apply_patch(target, f)
+        print('Patch applied successfully')
+    except Exception as e:
+        print(f'Error: {e}')
         sys.exit(1)
-    except (ValueError, FileNotFoundError, PermissionError) as e:
-        print(f"Error: {e}")
-        sys.exit(1)
-
-
-if __name__ == "__main__":
-    if len(sys.argv) != 3:
-        print("Usage: python patch.py <patch_file> <target_file>")
-        sys.exit(1)
-
-    patch_file = sys.argv[1]
-    target_file = sys.argv[2]
-
-    apply_secure_patch(patch_file, target_file)
